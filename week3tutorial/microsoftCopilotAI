##here is the microsoft copilot refined version of README.md in this folder:


Absolutely, Marko! Here's a refined and professional version of your original logic design documentation, broken into clear sections with improved clarity, grammar, and formatting:

---

## **Step 1: Understand and Define the Problem (Analysis)**

The goal is to design and simulate a **combinational logic circuit** for a seat belt sensor system. The system monitors:

- **Seat occupancy sensors** (driver and passenger)
- **Seat belt sensors** (driver and passenger)
- **Ignition status**
- **Alarm output**

The alarm should activate **only when the ignition is ON** and **an occupied front seat has an unfastened seatbelt**. The system assumes:

- It functions perfectly (no faults or malfunctions).
- The driver is always present (a passenger without a driver is not considered valid).
- The alarm is unnecessary if seats are unoccupied.

---

## **Step 2: Organise and Describe the Data**

| **Symbol** | **Meaning**                          | **Type** | **Active Logic**         |
|------------|--------------------------------------|----------|--------------------------|
| `DRIV`     | Driver is in the seat                | Input    | HIGH (1 = present)       |
| `PASS`     | Passenger is in the seat             | Input    | HIGH (1 = present)       |
| `IGN`      | Ignition switch is ON                | Input    | HIGH (1 = ON)            |
| `BELTD`    | Driver's seatbelt is unfastened      | Input    | LOW (0 = unfastened)     |
| `BELTP`    | Passenger's seatbelt is unfastened   | Input    | LOW (0 = unfastened)     |
| `ALARM`    | Alarm signal                         | Output   | LOW (0 = alarm sounds)   |

---

## **Step 3: Plan the Solution (Design the Algorithm)**

The logic follows these steps:

1. **Check ignition status**:
   - If `IGN = 1` (car is running), proceed.

2. **Driver seat check**:
   - If `DRIV = 1` and `BELTD = 0`, activate alarm (`ALARM = 0`).

3. **Passenger seat check**:
   - If `PASS = 1` and `BELTP = 0`, activate alarm (`ALARM = 0`).

4. **Alarm OFF condition**:
   - If all occupied seats have fastened seatbelts (`BELTD = 1` and/or `BELTP = 1`), and ignition is ON, then `ALARM = 1`.

---

## **Logic Summary**

The alarm activates (`ALARM = 0`) when:

- `IGN = 1` **AND**
  - (`DRIV = 1` **AND** `BELTD = 0`) **OR**
  - (`PASS = 1` **AND** `BELTP = 0`)

Otherwise, the alarm remains OFF (`ALARM = 1`).

---

## **Truth Table Overview**

With 5 inputs, the truth table will have \(2^5 = 32\) rows. Each row represents a unique combination of:

- `IGN`, `DRIV`, `BELTD`, `PASS`, `BELTP`

And the corresponding output `ALARM`.

---

Would you like me to generate the full truth table for you as well? Or perhaps a diagram of the logic circuit?



Here is the complete **truth table** for your seatbelt alarm logic circuit:

| IGN | DRIV | BELTD | PASS | BELTP | ALARM |
|-----|------|--------|------|--------|--------|
| 0   | 0    | 0      | 0    | 0      | 1      |
| 0   | 0    | 0      | 0    | 1      | 1      |
| 0   | 0    | 0      | 1    | 0      | 1      |
| 0   | 0    | 0      | 1    | 1      | 1      |
| 0   | 0    | 1      | 0    | 0      | 1      |
| 0   | 0    | 1      | 0    | 1      | 1      |
| 0   | 0    | 1      | 1    | 0      | 1      |
| 0   | 0    | 1      | 1    | 1      | 1      |
| 0   | 1    | 0      | 0    | 0      | 1      |
| 0   | 1    | 0      | 0    | 1      | 1      |
| 0   | 1    | 0      | 1    | 0      | 1      |
| 0   | 1    | 0      | 1    | 1      | 1      |
| 0   | 1    | 1      | 0    | 0      | 1      |
| 0   | 1    | 1      | 0    | 1      | 1      |
| 0   | 1    | 1      | 1    | 0      | 1      |
| 0   | 1    | 1      | 1    | 1      | 1      |
| 1   | 0    | 0      | 0    | 0      | 1      |
| 1   | 0    | 0      | 0    | 1      | 1      |
| 1   | 0    | 0      | 1    | 0      | 0      |
| 1   | 0    | 0      | 1    | 1      | 1      |
| 1   | 0    | 1      | 0    | 0      | 1      |
| 1   | 0    | 1      | 0    | 1      | 1      |
| 1   | 0    | 1      | 1    | 0      | 0      |
| 1   | 0    | 1      | 1    | 1      | 1      |
| 1   | 1    | 0      | 0    | 0      | 0      |
| 1   | 1    | 0      | 0    | 1      | 0      |
| 1   | 1    | 0      | 1    | 0      | 0      |
| 1   | 1    | 0      | 1    | 1      | 0      |
| 1   | 1    | 1      | 0    | 0      | 1      |
| 1   | 1    | 1      | 0    | 1      | 1      |
| 1   | 1    | 1      | 1    | 0      | 0      |
| 1   | 1    | 1      | 1    | 1      | 1      |

Let me know if you'd like this saved as a CSV or Excel file, or visualized as a logic diagram!









MARKO: now write me the python script that will go through the entire data table and give me the ones that will activate the car alarm

basically copilot wrote me a script that will go through all the possible inputs and then print the ones that would activate the alarm:


from itertools import product

def seatbelt_alarm(ign, driv, beltd, passg, beltp):
    # Alarm logic: activate (0) if ignition is on and either seat is occupied and unbelted
    return 0 if ign and ((driv and not beltd) or (passg and not beltp)) else 1

# Generate all possible combinations of 5 binary inputs
inputs = ['IGN', 'DRIV', 'BELTD', 'PASS', 'BELTP']
combinations = list(product([0, 1], repeat=5))

# Print header
print(f"{'Case':<5} {'IGN':<4} {'DRIV':<5} {'BELTD':<6} {'PASS':<5} {'BELTP':<6} {'ALARM':<6} {'Triggers Alarm?'}")

# Loop through combinations and evaluate alarm
for i, combo in enumerate(combinations, start=1):
    ign, driv, beltd, passg, beltp = combo
    alarm = seatbelt_alarm(ign, driv, beltd, passg, beltp)
    trigger = "✅ Yes" if alarm == 0 else "No"
    print(f"{i:<5} {ign:<4} {driv:<5} {beltd:<6} {passg:<5} {beltp:<6} {alarm:<6} {trigger}")










this is its output:


Case  IGN  DRIV  BELTD  PASS  BELTP  ALARM  Triggers Alarm?
1     0    0     0      0     0      1      No
2     0    0     0      0     1      1      No
3     0    0     0      1     0      1      No
4     0    0     0      1     1      1      No
5     0    0     1      0     0      1      No
6     0    0     1      0     1      1      No
7     0    0     1      1     0      1      No
8     0    0     1      1     1      1      No
9     0    1     0      0     0      1      No
10    0    1     0      0     1      1      No
11    0    1     0      1     0      1      No
12    0    1     0      1     1      1      No
13    0    1     1      0     0      1      No
14    0    1     1      0     1      1      No
15    0    1     1      1     0      1      No
16    0    1     1      1     1      1      No
17    1    0     0      0     0      1      No
18    1    0     0      0     1      1      No
19    1    0     0      1     0      0      ✅ Yes
20    1    0     0      1     1      1      No
21    1    0     1      0     0      1      No
22    1    0     1      0     1      1      No
23    1    0     1      1     0      0      ✅ Yes
24    1    0     1      1     1      1      No
25    1    1     0      0     0      0      ✅ Yes
26    1    1     0      0     1      0      ✅ Yes
27    1    1     0      1     0      0      ✅ Yes
28    1    1     0      1     1      0      ✅ Yes
29    1    1     1      0     0      1      No
30    1    1     1      0     1      1      No
31    1    1     1      1     0      0      ✅ Yes
32    1    1     1      1     1      1      No




current as at: 13 August 2025

MARKO PEROKVIC 3297798
